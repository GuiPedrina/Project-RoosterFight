//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Imputs/Controles Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlesPlayer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlesPlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controles Player"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""599ad91c-49c9-4698-91d0-ff6e3d158f02"",
            ""actions"": [
                {
                    ""name"": ""Movimentacao"",
                    ""type"": ""Value"",
                    ""id"": ""4af94549-4b83-4041-95d0-567f819c058a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f5ee63c2-a1df-434e-aa60-53dbf0b5a391"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AtkMeele"",
                    ""type"": ""Button"",
                    ""id"": ""41e7f1de-d3a7-43a8-9178-5b55fd66b48e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AtkRanged"",
                    ""type"": ""Button"",
                    ""id"": ""e58fc5db-8a98-4aeb-a7c5-a20655f94cac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Movimento"",
                    ""id"": ""eeafe6ff-abe3-422a-b615-8bb49e804848"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ad4358e5-26d9-4976-b07a-3003bdd81618"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""58891e46-11b7-4c18-8210-100020654837"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b657964-6d1b-44ef-a160-000986fa2d49"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f1b39600-c6d7-42b9-92e8-aa2c4b527aef"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""720b3964-f1f7-4c62-acf5-dbde4489468a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1356fd4d-1bea-43f5-81ae-802abc180f36"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81dd6ff7-15ef-4555-99f1-249bf32c67d5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""901c555a-b5fb-4ccd-bdf9-73af30392397"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AtkMeele"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04198942-b152-4edf-80b8-6bec23d65371"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AtkMeele"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0078e94c-a632-4509-afbd-c91eed7eceff"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AtkRanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34fd344c-3702-4d4f-974d-2f0c140b8088"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AtkRanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movimentacao = m_Player.FindAction("Movimentacao", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_AtkMeele = m_Player.FindAction("AtkMeele", throwIfNotFound: true);
        m_Player_AtkRanged = m_Player.FindAction("AtkRanged", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movimentacao;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_AtkMeele;
    private readonly InputAction m_Player_AtkRanged;
    public struct PlayerActions
    {
        private @ControlesPlayer m_Wrapper;
        public PlayerActions(@ControlesPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movimentacao => m_Wrapper.m_Player_Movimentacao;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @AtkMeele => m_Wrapper.m_Player_AtkMeele;
        public InputAction @AtkRanged => m_Wrapper.m_Player_AtkRanged;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movimentacao.started += instance.OnMovimentacao;
            @Movimentacao.performed += instance.OnMovimentacao;
            @Movimentacao.canceled += instance.OnMovimentacao;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @AtkMeele.started += instance.OnAtkMeele;
            @AtkMeele.performed += instance.OnAtkMeele;
            @AtkMeele.canceled += instance.OnAtkMeele;
            @AtkRanged.started += instance.OnAtkRanged;
            @AtkRanged.performed += instance.OnAtkRanged;
            @AtkRanged.canceled += instance.OnAtkRanged;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movimentacao.started -= instance.OnMovimentacao;
            @Movimentacao.performed -= instance.OnMovimentacao;
            @Movimentacao.canceled -= instance.OnMovimentacao;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @AtkMeele.started -= instance.OnAtkMeele;
            @AtkMeele.performed -= instance.OnAtkMeele;
            @AtkMeele.canceled -= instance.OnAtkMeele;
            @AtkRanged.started -= instance.OnAtkRanged;
            @AtkRanged.performed -= instance.OnAtkRanged;
            @AtkRanged.canceled -= instance.OnAtkRanged;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovimentacao(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAtkMeele(InputAction.CallbackContext context);
        void OnAtkRanged(InputAction.CallbackContext context);
    }
}
